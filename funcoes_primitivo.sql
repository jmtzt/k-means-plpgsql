-- CRIACAO DE KN PONTOS INICIALIZADOS ALEATORIAMENTE 
-- QUE SAO AS COORDENADAS DOS CENTROIDES
-- CADA UM DESTES COM O SEU RESPECTIVO ID
CREATE OR REPLACE FUNCTION CENTROID_FN(kn integer) RETURNS VOID AS $$
	BEGIN
		FOR i in 1 .. kn LOOP
			INSERT INTO CENTROID (cl_number, sepal_length, sepal_width, petal_length, petal_width) SELECT i, random(), random(), random(), random();
-- 			RAISE NOTICE 'I: %', i;
		END LOOP;
	END;
$$ LANGUAGE PLPGSQL;

-- CALCULO DA DISTANCIA ENTRE CADA LINHA DA TABELA IRIS NORMALIZADO
-- E A TABELA CENTROID, ATRIBUTO POR ATRIBUTO
CREATE OR REPLACE FUNCTION DISTANCE_FN(sli REAL, slc REAL, swi REAL, swc REAL, plir REAL, plc REAL, pwir REAL, pwc REAL) RETURNS REAL AS $$
	BEGIN
		RETURN sqrt(power((slc - sli), 2) + power((swi - swc), 2) + power((plir - plc), 2) + power((pwir - pwc), 2));
	END;
$$ LANGUAGE PLPGSQL;

-- INSERE EM UMA TABELA AS DISTANCIAS CALCULADAS, AS COORDENADAS DOS PONTOS E O CENTROIDE RESPECTIVO DESTE CALCULO
CREATE OR REPLACE FUNCTION CALC_DIST() RETURNS VOID AS $$
	BEGIN
		INSERT INTO DISTANCIAS SELECT I.COD, CE.CL_NUMBER, I.sepal_length, I.sepal_width, I.petal_length, I.petal_width, DISTANCE_FN(I.sepal_length, CE.sepal_length, I.sepal_width, CE.sepal_width, I.petal_length, CE.petal_length, I.petal_width, CE.petal_width)
										FROM IRIS_NORMALIZADO AS I, CENTROID AS CE;
	END;
$$ LANGUAGE PLPGSQL;

SELECT CALC_DIST();

-- A FIM DE DETERMINAR A QUAL GRUPO TAL PONTO PERTENCE, E PRECISO DETERMINAR A MENOR DISTANCIA
-- ENTRE AS KN DISTANCIAS CALCULADAS POR TUPLA DA TABELA IRIS NORMALIZADA
-- PARA ISSO, FAZ-SE O USO DESTA FUNCAO
CREATE OR REPLACE FUNCTION INSERE_REGIAO_FN() RETURNS VOID AS $$
	BEGIN
		FOR i in 1 .. 150 LOOP
			INSERT INTO CLUSTERS SELECT DISTINCT ON (dist) cl_number, sepal_length, sepal_width, petal_length, petal_width, dist FROM DISTANCIAS WHERE dist = (SELECT min(dist) FROM DISTANCIAS WHERE cod = i);
		END LOOP;
	END;
$$ LANGUAGE PLPGSQL;